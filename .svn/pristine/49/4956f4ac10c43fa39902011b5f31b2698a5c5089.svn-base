package com.gdtopway.realtimedata.processor;

import com.gdtopway.realtimedata.config.BaseConfig;
import com.gdtopway.realtimedata.domain.RealTimeLoad;
import com.gdtopway.realtimedata.domain.State;
import com.gdtopway.realtimedata.repository.RealTimeLoadRepository;
import com.gdtopway.realtimedata.service.IRealTimeDataService;
import com.gdtopway.realtimedata.service.StateService;
import com.gdtopway.realtimedata.util.*;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.component.file.GenericFileMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.*;
import java.util.List;
import java.util.Map;

/**
 * Created by rainbow on 2018/11/6.
 * 调度数据处理器
 */
@Component
public class DataProcessor implements Processor {

    @Value("${ftp.local-dir}")
    private String localDir;
    @Autowired
    private BaseConfig baseConfig;
    @Autowired
    private RenameFile renameFile;
    @Autowired
    private DoFile dofile;

    private static final Logger logger = LoggerFactory.getLogger(DataProcessor.class);

    @Override
    public void process(Exchange exchange) throws Exception {

        GenericFileMessage<RandomAccessFile> inFileMessage = (GenericFileMessage<RandomAccessFile>) exchange.getIn();
        String fileName = null;
        boolean isComplete = false;
        while (!isComplete) {
            fileName = inFileMessage.getGenericFile().getFileName();
            String filePath = localDir + '/' + fileName;
            File file = new File(filePath);
            if (file.exists()) {
                isComplete = true;
            } else {
                continue;
            }
        }
        //1.调用重命名文件
        Map<String, String> renameMap =  renameFile.reNameFile(localDir,fileName);
        //2.调用处理文件
        dofile.doFile(renameMap);

    }
}
